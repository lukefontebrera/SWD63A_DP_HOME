@page "/login"
@using WebApp.Models;
@using WebApp.Services;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (ShowErrors)
{
	<div class="alert alert-danger" role="alert">
		<p>@Error</p>
	</div>
}

<div class="card">
	<div class="card-body">
		<h5 class="card-title">Please enter your details</h5>
		<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label for="email">Email Address</label>
				<InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
				<ValidationMessage For="@(() => loginModel.Email)" />
			</div>
			<div class="form-group" style="display: none;">
				<label for="firstName">First Name</label>
				<InputText Id="firstName" Class="form-control" @bind-Value="loginModel.FirstName" />
				<ValidationMessage For="@(() => loginModel.FirstName)" />
			</div>
			<div class="form-group" style="display: none;">
				<label for="lastName">Last Name</label>
				<InputText Id="lastName" Class="form-control" @bind-Value="loginModel.LastName" />
				<ValidationMessage For="@(() => loginModel.LastName)" />
			</div>
			<div class="form-group">
				<label for="password">Password</label>
				<InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
				<ValidationMessage For="@(() => loginModel.Password)" />
			</div>
			<button type="submit" class="btn btn-primary">Submit</button>
		</EditForm>
	</div>
</div>

@code {
	private LoginModel loginModel = new LoginModel
		{
			FirstName = "John", // Fake-details, did not manage to make the program work without these in login
			LastName = "Doe",  // Fake-details, did not manage to make the program work without these in login
		};
	private bool ShowErrors;
	private string Error = "";

	private async Task HandleLogin()
	{
		ShowErrors = false;
		var result = await AuthService.Login(loginModel);

		if (result.Successful)
		{
			NavigationManager.NavigateTo("/");
		}
		else
		{
			Error = result.Error;
			ShowErrors = true;
		}
	}
}

