@page "/register"
@using WebApp.Models
@using WebApp.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Register</h1>

@if (ShowErrors)
{
	<div class="alert alert-danger" role="alert">
		@foreach (var error in Errors)
		{
			<p>@error</p>
		}
	</div>
}

<div class="card">
	<div class="card-body">
		<h5 class="card-title">Please enter your details</h5>
		<EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label for="email">Email Address</label>
				<InputText Id="email" Class="form-control" @bind-Value="registerModel.Email" />
				<ValidationMessage For="@(() => registerModel.Email)" />
			</div>
			<div class="form-group">
				<label for="firstName">First Name</label>
				<InputText Id="firstName" Class="form-control" @bind-Value="registerModel.FirstName" />
				<ValidationMessage For="@(() => registerModel.FirstName)" />
			</div>
			<div class="form-group">
				<label for="lastName">Last Name</label>
				<InputText Id="lastName" Class="form-control" @bind-Value="registerModel.LastName" />
				<ValidationMessage For="@(() => registerModel.LastName)" />
			</div>
			<div class="form-group">
				<label for="password">Password</label>
				<InputText Id="password" type="password" Class="form-control" @bind-Value="registerModel.Password" />
				<ValidationMessage For="@(() => registerModel.Password)" />
			</div>
			<button type="submit" class="btn btn-primary">Submit</button>
		</EditForm>
	</div>
</div>

@code {
	private RegisterModel registerModel = new RegisterModel();
	private bool ShowErrors;
	private IEnumerable<string> Errors;

	private async Task HandleRegistration()
	{
		ShowErrors = false;

		var result = await AuthService.Register(registerModel);

		if (result.Successful)
		{
			NavigationManager.NavigateTo("/login");
		}
		else
		{
			Errors = result.Errors;
			ShowErrors = true;
		}

	}
}
